// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.Context;

#nullable disable

namespace Service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Admins", b =>
                {
                    b.Property<int>("adminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adminID"));

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSlat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adminEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("adminName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("adminID");

                    b.HasIndex("adminEmail")
                        .IsUnique();

                    b.HasIndex("adminName")
                        .IsUnique();

                    b.ToTable("admins", t =>
                        {
                            t.HasCheckConstraint("CK_Admins_Email_Gmail", "[adminEmail] LIKE '%@%.com'");
                        });
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Content", b =>
                {
                    b.Property<int>("contentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("contentID"));

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecturesNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("contentHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("contentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.HasKey("contentID");

                    b.HasIndex("courseID");

                    b.ToTable("contents");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Courses", b =>
                {
                    b.Property<int>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseID"));

                    b.Property<string>("CourseCertification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CoursePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("courseHours")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("courseLevel")
                        .HasColumnType("int");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("courseRate")
                        .HasColumnType("int");

                    b.Property<int>("instructorID")
                        .HasColumnType("int");

                    b.HasKey("courseID");

                    b.HasIndex("categoryID");

                    b.HasIndex("instructorID");

                    b.ToTable("courses", t =>
                        {
                            t.HasCheckConstraint("CK_Course_Rate_0<x<=5", "[courseRate] > 0 AND [courseRate] <= 5");
                        });
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.JobTitle", b =>
                {
                    b.Property<int>("JobTilteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTilteID"));

                    b.Property<string>("JobTilteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JobTilteID");

                    b.HasIndex("JobTilteName")
                        .IsUnique();

                    b.ToTable("jobTitles");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.categories", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryID"));

                    b.Property<string>("categoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("categoryID");

                    b.HasIndex("categoryName")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.instructors", b =>
                {
                    b.Property<int>("instructorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("instructorID"));

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("courseRate")
                        .HasColumnType("int");

                    b.Property<string>("instructorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instructorImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instructorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("jobTitleID")
                        .HasColumnType("int");

                    b.HasKey("instructorID");

                    b.HasIndex("jobTitleID");

                    b.ToTable("instructors", t =>
                        {
                            t.HasCheckConstraint("CK_Course_Rate_0<x<=5", "[courseRate] > 0 AND [courseRate] <= 5")
                                .HasName("CK_Course_Rate_0<x<=51");
                        });
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.UserCoursesDetail", b =>
                {
                    b.Property<int>("UserCoursesDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCoursesDetailID"));

                    b.Property<int>("UserCoursesHeaderID")
                        .HasColumnType("int");

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.Property<decimal>("coursePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UserCoursesDetailID");

                    b.HasIndex("UserCoursesHeaderID");

                    b.HasIndex("courseID");

                    b.ToTable("userCoursesDetails");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.UserCoursesHeader", b =>
                {
                    b.Property<int>("UserCoursesHeaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCoursesHeaderID"));

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserCoursesHeaderID");

                    b.HasIndex("UserID");

                    b.ToTable("userCoursesHeaders");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreateDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSlat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", t =>
                        {
                            t.HasCheckConstraint("CK_Users_Email_Gmail", "[UserEmail] LIKE '%@%.com'");
                        });
                });

            modelBuilder.Entity("Domain.Shared.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("payments");

                    b.HasDiscriminator<string>("PaymentType").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.DataBase.PaymentMethod.CreditCardPayment", b =>
                {
                    b.HasBaseType("Domain.Shared.Payment");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CreditCard");
                });

            modelBuilder.Entity("Domain.Models.DataBase.PaymentMethod.PaypalPayment", b =>
                {
                    b.HasBaseType("Domain.Shared.Payment");

                    b.Property<string>("PaypalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PayPal");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Content", b =>
                {
                    b.HasOne("Domain.Models.DataBase.AdminPersona.Courses", "Courses")
                        .WithMany("content")
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Courses", b =>
                {
                    b.HasOne("Domain.Models.DataBase.AdminPersona.categories", "categories")
                        .WithMany("courses")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataBase.AdminPersona.instructors", "instructors")
                        .WithMany("courses")
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categories");

                    b.Navigation("instructors");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.instructors", b =>
                {
                    b.HasOne("Domain.Models.DataBase.AdminPersona.JobTitle", "jobTitle")
                        .WithMany("instructors")
                        .HasForeignKey("jobTitleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("jobTitle");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.UserCoursesDetail", b =>
                {
                    b.HasOne("Domain.Models.DataBase.UserPersona.UserCoursesHeader", "userCoursesHeader")
                        .WithMany("userCoursesDetails")
                        .HasForeignKey("UserCoursesHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataBase.AdminPersona.Courses", "Courses")
                        .WithMany("userCoursesDetails")
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("userCoursesHeader");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.UserCoursesHeader", b =>
                {
                    b.HasOne("Domain.Models.DataBase.UserPersona.Users", "users")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.Shared.Payment", b =>
                {
                    b.HasOne("Domain.Models.DataBase.UserPersona.Users", "Users")
                        .WithMany("payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.Courses", b =>
                {
                    b.Navigation("content");

                    b.Navigation("userCoursesDetails");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.JobTitle", b =>
                {
                    b.Navigation("instructors");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.categories", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("Domain.Models.DataBase.AdminPersona.instructors", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.UserCoursesHeader", b =>
                {
                    b.Navigation("userCoursesDetails");
                });

            modelBuilder.Entity("Domain.Models.DataBase.UserPersona.Users", b =>
                {
                    b.Navigation("UserCourses");

                    b.Navigation("payments");
                });
#pragma warning restore 612, 618
        }
    }
}
